{"version":3,"file":"index.modern.mjs","sources":["../src/misc/arrayHelpers.ts","../src/misc/objectFlatten.ts","../src/misc/logger/logger-base.ts","../src/misc/logger/logger.ts","../src/misc/logger/firestore-logger.ts","../src/misc/dispatcher.ts","../src/misc/translate-from-firestore.ts","../src/misc/document-parser.ts","../src/misc/internal.models.ts","../src/misc/pathHelper.ts","../src/misc/translate-to-firestore.ts","../src/providers/database/firebase/FirebaseWrapper.ts","../src/misc/firebase-models.ts","../src/providers/database/ResourceManager.ts","../src/providers/database/FireClient.ts","../src/misc/metadata-parser.ts","../src/providers/lazy-loading/queryCursors.ts","../src/providers/lazy-loading/paramsToQuery.ts","../src/providers/lazy-loading/FirebaseLazyLoadingClient.ts","../src/providers/DataProvider.ts","../src/misc/status-code-translator.ts","../src/providers/queries/GetList.ts","../src/providers/queries/GetOne.ts","../src/providers/queries/GetMany.ts","../src/providers/queries/GetManyReference.ts","../src/providers/commands/Update.ts","../src/providers/commands/UpdateMany.ts","../src/providers/commands/Create.ts","../src/providers/commands/Delete.ts","../src/providers/commands/Delete.Soft.ts","../src/providers/commands/DeleteMany.ts","../src/providers/commands/DeleteMany.Soft.ts","../src/providers/AuthProvider.ts"],"sourcesContent":["import { get, isEmpty } from 'lodash';\nimport { getFieldReferences, SearchObj } from './objectFlatten';\n\nexport function sortArray(\n  data: Array<{}>,\n  field: string,\n  dir: 'asc' | 'desc'\n): void {\n  data.sort((a: {}, b: {}) => {\n    const rawA = get(a, field);\n    const rawB = get(b, field);\n    const isAsc = dir === \"asc\";\n\n    const isNumberField = Number.isFinite(rawA) && Number.isFinite(rawB);\n    if (isNumberField) {\n      return basicSort(rawA, rawB, isAsc);\n    }\n    const isStringField = typeof rawA === 'string' && typeof rawB === 'string';\n    if (isStringField) {\n      const aParsed = rawA.toLowerCase();\n      const bParsed = rawB.toLowerCase();\n      return basicSort(aParsed, bParsed, isAsc);\n    }\n    const isDateField = rawA instanceof Date && rawB instanceof Date;\n    if (isDateField) {\n      return basicSort(rawA, rawB, isAsc);\n    }\n    return basicSort(!!rawA, !!rawB, isAsc);\n  });\n}\n\nfunction basicSort(aValue: any, bValue: any, isAsc: boolean) {\n  if (aValue > bValue) {\n    return isAsc ? 1 : -1;\n  }\n  if (aValue < bValue) {\n    return isAsc ? -1 : 1;\n  }\n  return 0;\n}\n\nexport function filterArray(\n  data: Array<{}>,\n  searchFields?: { [field: string]: string | number | boolean | null }\n): Array<{}> {\n  if (!searchFields || isEmpty(searchFields)) {\n    return data;\n  }\n  const searchObjs: SearchObj[] = [];\n  Object.keys(searchFields).map((fieldName) => {\n    const fieldValue = searchFields[fieldName];\n    const getSubObjects = getFieldReferences(fieldName, fieldValue);\n    searchObjs.push(...getSubObjects);\n  });\n  const filtered = data.filter((row) =>\n    searchObjs.reduce((acc, cur) => {\n      const res = doesRowMatch(row, cur.searchField, cur.searchValue);\n      return res && acc;\n    }, true as boolean)\n  );\n  return filtered;\n}\n\nexport function doesRowMatch(\n  row: {},\n  searchField: string,\n  searchValue: any\n): boolean {\n  const searchThis = get(row, searchField);\n  const bothAreFalsey = !searchThis && !searchValue;\n  if (bothAreFalsey) {\n    return true;\n  }\n  const nothingToSearch = !searchThis;\n  if (nothingToSearch) {\n    return false;\n  }\n  const isStringSearch = typeof searchValue === 'string';\n  if (isStringSearch) {\n    return searchThis\n      .toString()\n      .toLowerCase()\n      .includes(searchValue.toLowerCase());\n  }\n  const isBooleanOrNumber =\n    typeof searchValue === 'boolean' || typeof searchValue === 'number';\n  if (isBooleanOrNumber) {\n    return searchThis === searchValue;\n  }\n  const isArraySearch = Array.isArray(searchValue);\n  if (isArraySearch) {\n    return searchValue.includes(searchThis);\n  }\n  return false;\n}\n","type SearchValues = {} | number | string | boolean | null ;\ntype SearchValue = SearchValues | SearchValue[];\n\nexport interface SearchObj {\n  searchField: string;\n  searchValue: SearchValue;\n}\nexport function getFieldReferences(\n  fieldName: string,\n  value: {} | SearchValue\n): SearchObj[] {\n  const isFalsy = !value;\n  const isSimple = isFalsy ||\n    typeof value === 'string' ||\n    typeof value === 'number' ||\n    typeof value === 'boolean';\n\n  if (isSimple) {\n    return [\n      {\n        searchField: fieldName,\n        searchValue: value as SearchValue,\n      },\n    ];\n  }\n  const tree = {} as Record<string, SearchValue>;\n  tree[fieldName] = value;\n  return objectFlatten(tree);\n}\n\nexport function objectFlatten(tree: {}): SearchObj[] {\n  var leaves: SearchObj[] = [];\n  var recursivelyWalk = function (obj: any, path: string | null) {\n    path = path || \"\";\n    for (var key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        const objVal = obj && obj[key];\n        const currentPath = !!path ? path + \".\" + key : key;\n        const isWalkable =\n          typeof objVal === 'object' || objVal instanceof Array;\n        if (isWalkable) {\n          recursivelyWalk(objVal, currentPath);\n        } else {\n          leaves.push({ searchField: currentPath, searchValue: objVal });\n        }\n      }\n    }\n  };\n  recursivelyWalk(tree, null);\n  return leaves;\n}\n","type LogFn = (...args: any) => void;\n\nexport const LogNoOp: LogFn = (...args: any) => null;\n\nexport class LoggerBase {\n  constructor(private title: string, private cacheEnabledKey: string) {}\n\n  private isEnabled() {\n    return !!localStorage.getItem(this.cacheEnabledKey);\n  }\n\n  SetEnabled(isEnabled: boolean) {\n    if (isEnabled) {\n      localStorage.setItem(this.cacheEnabledKey, 'true');\n    } else {\n      localStorage.removeItem(this.cacheEnabledKey);\n    }\n  }\n\n  public get log() {\n    if (!this.isEnabled()) {\n      return LogNoOp;\n    }\n    const boundLogFn: (...args: any) => void = console.log.bind(\n      console,\n      this.title\n    );\n    return boundLogFn;\n  }\n\n  public get warn() {\n    if (!this.isEnabled()) {\n      return LogNoOp;\n    }\n    const boundLogFn: (...args: any) => void = console.warn.bind(\n      console,\n      this.title\n    );\n    return boundLogFn;\n  }\n\n  public get error() {\n    if (!this.isEnabled()) {\n      return LogNoOp;\n    }\n    const boundLogFn: (...args: any) => void = console.error.bind(\n      console,\n      this.title\n    );\n    return boundLogFn;\n  }\n}\n","import { LoggerBase } from './logger-base';\n\nconst LOGGER_ENABLEDKEY = 'LOGGING_ENABLED';\nexport const logger = new LoggerBase('ðŸ”¥raf:', LOGGER_ENABLEDKEY);\n\nexport const log = logger.log;\nexport const logError = logger.error;\nexport const logWarn = logger.warn;\n","import { RAFirebaseOptions } from 'providers/options';\nimport { LogNoOp, LoggerBase } from './logger-base';\n\nconst LOGGER_ENABLEDKEY = 'LOGGING_FIRESTORE_COSTS_ENABLED';\nconst logger = new LoggerBase('ðŸ’¸firestore-costs:', LOGGER_ENABLEDKEY);\n\nconst KEY_SINGLE = 'firecosts-single-reads';\n\nexport interface IFirestoreLogger {\n  logDocument: (count: number) => Function;\n  SetEnabled: (isEnabled: boolean) => void;\n  ResetCount: (shouldReset: boolean) => void;\n}\n\nexport function MakeFirestoreLogger(\n  options: RAFirebaseOptions\n): IFirestoreLogger {\n  function notEnabled() {\n    return !options?.lazyLoading?.enabled;\n  }\n\n  function incrementRead(incrementBy = 1) {\n    const currentCountRaw = localStorage.getItem(KEY_SINGLE) || '';\n    const currentCount = parseInt(currentCountRaw) || 0;\n    const incremented = currentCount + incrementBy;\n    localStorage.setItem(KEY_SINGLE, incremented + '');\n    return incremented;\n  }\n  function clearCache() {\n    localStorage.removeItem(KEY_SINGLE);\n  }\n  return {\n    SetEnabled(isEnabled: boolean) {\n      logger.SetEnabled(isEnabled);\n    },\n    ResetCount(shouldReset: boolean) {\n      shouldReset && clearCache()\n    },\n    logDocument(docCount: number) {\n      if (notEnabled()) {\n        return LogNoOp;\n      }\n      const count = incrementRead(docCount);\n      const suffix = `+${docCount} (session total=${count} documents read)`;\n      const boundLogFn: (...args: any) => void = logger.log.bind(\n        console,\n        suffix\n      );\n      return boundLogFn;\n    },\n  };\n}\n","import { log } from './logger';\n\nexport type DispatchEvent =\n\t'FILE_UPLOAD_WILL_START' |\n\t'FILE_UPLOAD_PROGRESS' |\n\t'FILE_UPLOAD_PAUSED' |\n\t'FILE_UPLOAD_RUNNING' |\n\t'FILE_UPLOAD_CANCELED' |\n\t'FILE_UPLOAD_COMPLETE' |\n\t'FILE_SAVED';\n\nexport function dispatch(\n\teventName: DispatchEvent,\n\tfileName: string,\n\tdata?: any,\n): void {\n\tconst eventMonitor = document.getElementById('eventMonitor');\n\tif (!eventMonitor) {\n\t\tlog(`eventMonitor not found to dispatch event ${eventName} for ${fileName}`);\n\t\treturn;\n\t}\n\tconst eventData = { fileName, data };\n\tlet event = new CustomEvent(eventName, { detail: eventData });\n\teventMonitor.dispatchEvent(event);\n};","import { set, has } from \"lodash\";\nimport { IFirebaseWrapper } from \"providers/database\";\nimport { REF_INDENTIFIER } from \"./internal.models\";\nimport { logError } from \"./logger\";\nimport { FireStoreDocumentRef } from \"./firebase-models\";\n\nexport interface RefDocFound {\n  fieldPath: string;\n  refDocPath: string;\n}\n\nexport interface FromFirestoreResult {\n  parsedDoc: any;\n  refdocs: RefDocFound[];\n}\n\nexport function translateDocFromFirestore(obj: any) {\n  const isObject = !!obj && typeof obj === \"object\";\n  const result: FromFirestoreResult = {\n    parsedDoc: {},\n    refdocs: [],\n  };\n  if (!isObject) {\n    return result;\n  }\n  Object.keys(obj).map((key) => {\n    const value = obj[key];\n    obj[key] = recusivelyCheckObjectValue(value, key, result);\n  });\n  result.parsedDoc = obj;\n  return result;\n}\n\nexport function recusivelyCheckObjectValue(\n  input: any,\n  fieldPath: string,\n  result: FromFirestoreResult\n): any {\n  const isFalsey = !input;\n  if (isFalsey) {\n    return input;\n  }\n  const isPrimitive = typeof input !== \"object\";\n  if (isPrimitive) {\n    return input;\n  }\n  const isTimestamp = !!input.toDate && typeof input.toDate === \"function\";\n  if (isTimestamp) {\n    return input.toDate();\n  }\n  const isArray = Array.isArray(input);\n  if (isArray) {\n    return (input as any[]).map((value, index) =>\n      recusivelyCheckObjectValue(value, `${fieldPath}.${index}`, result)\n    );\n  }\n  const isDocumentReference = isInputADocReference(input);\n  if (isDocumentReference) {\n    const ref = input as FireStoreDocumentRef;\n    result.refdocs.push({ fieldPath: fieldPath, refDocPath: ref.path });\n    return ref.id;\n  }\n  const isObject = typeof input === \"object\";\n  if (isObject) {\n    Object.keys(input).map((key) => {\n      const value = input[key];\n      input[key] = recusivelyCheckObjectValue(value, key, result);\n    });\n    return input;\n  }\n  return input;\n}\n\nfunction isInputADocReference(input: any): boolean {\n  const isDocumentReference = typeof input.id === \"string\" &&\n    typeof input.firestore === \"object\" &&\n    typeof input.parent === \"object\" &&\n    typeof input.path === \"string\";\n  return isDocumentReference;\n}\n\nexport function applyRefDocs(\n  doc: any,\n  refDocs: RefDocFound[],\n) {\n  refDocs.map((d) => {\n    set(doc, REF_INDENTIFIER + d.fieldPath, d.refDocPath);\n  });\n  return doc;\n}\n\nexport const recursivelyMapStorageUrls = async (\n  fireWrapper: IFirebaseWrapper,\n  fieldValue: any\n): Promise<any> => {\n  const isPrimitive = !fieldValue || typeof fieldValue !== 'object';\n  if (isPrimitive) {\n    return fieldValue\n  }\n  const isFileField = has(fieldValue, 'src');\n  if (isFileField) {\n    try {\n      const src = await fireWrapper\n        .storage()\n        .ref(fieldValue.src)\n        .getDownloadURL();\n      return {\n        ...fieldValue,\n        src,\n      };\n    } catch (error) {\n      logError(`Error when getting download URL`, {\n        error,\n      });\n      return fieldValue;\n    }\n  }\n  const isArray = Array.isArray(fieldValue);\n  if (isArray) {\n    return Promise.all(\n      (fieldValue as any[]).map(async (value, index) => {\n        fieldValue[index] = await recursivelyMapStorageUrls(fireWrapper, value);\n      })\n    ).then(() => {\n      return fieldValue;\n    });\n  }\n  const isDocumentReference = isInputADocReference(fieldValue);\n  if (isDocumentReference) {\n    return fieldValue;\n  }\n\n  const isJSDate = fieldValue instanceof Date;\n  if(isJSDate){\n    return fieldValue;\n  }\n\n  const isObject = !isArray && typeof fieldValue === \"object\";\n  if (isObject) {\n    return Promise.all(\n      Object.keys(fieldValue).map(async (key) => {\n        const value = fieldValue[key];\n        fieldValue[key] = await recursivelyMapStorageUrls(fireWrapper, value);\n      })\n    ).then(() => {\n      return fieldValue;\n    });;\n  }\n};\n","import { FireStoreQueryDocumentSnapshot, FireStoreDocumentSnapshot } from \"./firebase-models\";\nimport { logWarn } from \"./logger\";\nimport { applyRefDocs, translateDocFromFirestore } from \"./translate-from-firestore\";\nimport * as ra from './react-admin-models';\n\nexport function parseFireStoreDocument<T extends ra.Record>(doc: FireStoreQueryDocumentSnapshot | FireStoreDocumentSnapshot | undefined): T {\n  if (!doc) {\n    logWarn('parseFireStoreDocument: no doc', { doc });\n    return {} as T;\n  }\n  const data = doc.data();\n  const result = translateDocFromFirestore(data);\n  const dataWithRefs = applyRefDocs(result.parsedDoc, result.refdocs);\n  // React Admin requires an id field on every document,\n  // So we can just using the firestore document id\n  return { id: doc.id, ...dataWithRefs } as T;\n}\n","export const REF_INDENTIFIER = \"___REF_FULLPATH_\";\n\nexport interface ParsedRefDoc {\n  ___refpath: string;\n  ___refid: string;\n}\n","import path from \"path-browserify\";\n\nexport function getAbsolutePath(\n  rootRef: undefined | string | (() => string),\n  relativePath: string | null\n): string {\n  if (!rootRef) {\n    return relativePath+'';\n  }\n  if (!relativePath) {\n    throw new Error(\n      \"Resource name must be a string of length greater than 0 characters\"\n    );\n  }\n  const rootRefValue = typeof rootRef === \"string\" ? rootRef : rootRef();\n  const withSlashes = path.join(\"/\", rootRefValue, \"/\", relativePath, \"/\");\n  const slashCount = withSlashes.split(\"/\").length - 1;\n  if (slashCount % 2) {\n    throw new Error(`The rootRef path must point to a \"document\"\n    not a \"collection\"e.g. /collection/document/ or\n    /collection/document/collection/document/`);\n  }\n  return withSlashes.slice(1, -1);\n}\n\nexport function joinPaths(...args: string[]) {\n  return path.join(...args);\n}\n","import { REF_INDENTIFIER } from \"./internal.models\";\n\ninterface ParsedUpload {\n  fieldDotsPath: string;\n  fieldSlashesPath: string;\n  rawFile: File | any;\n}\n\ninterface ParsedDocRef {\n  fieldDotsPath: string;\n  refPath: string;\n}\n\ninterface ParseResult {\n  parsedDoc: any;\n  uploads: ParsedUpload[];\n  refdocs: ParsedDocRef[];\n}\n\nexport function translateDocToFirestore(obj: any): ParseResult {\n  const isObject = !!obj && typeof obj === \"object\";\n  const result: ParseResult = {\n    uploads: [],\n    refdocs: [],\n    parsedDoc: {},\n  };\n  if (!isObject) {\n    return result;\n  }\n  Object.keys(obj).map((key) => {\n    const value = obj[key];\n    recusivelyParseObjectValue(value, key, result);\n  });\n  result.parsedDoc = obj;\n  return result;\n}\n\nexport function recusivelyParseObjectValue(\n  input: any,\n  fieldPath: string,\n  result: ParseResult\n): any {\n  const isFalsey = !input;\n  if (isFalsey) {\n    return input;\n  }\n  const isRefField =\n    typeof fieldPath === \"string\" && fieldPath.includes(REF_INDENTIFIER);\n  if (isRefField) {\n    const refDocFullPath = input as string;\n    result.refdocs.push({\n      fieldDotsPath: fieldPath,\n      refPath: refDocFullPath,\n    });\n    return;\n  }\n  const isPrimitive = typeof input !== \"object\";\n  if (isPrimitive) {\n    return input;\n  }\n  const isTimestamp = !!input.toDate && typeof input.toDate === \"function\";\n  if (isTimestamp) {\n    return input.toDate();\n  }\n  const isArray = Array.isArray(input);\n  if (isArray) {\n    return (input as []).map((value, index) =>\n      recusivelyParseObjectValue(value, `${fieldPath}.${index}`, result)\n    );\n  }\n  const isFileField = !!input && input.hasOwnProperty(\"rawFile\");\n  if (isFileField) {\n    result.uploads.push({\n      fieldDotsPath: fieldPath,\n      fieldSlashesPath: fieldPath.split(\".\").join(\"/\"),\n      rawFile: input.rawFile,\n    });\n    delete input.rawFile;\n    return;\n  }\n  Object.keys(input).map((key) => {\n    const value = input[key];\n    recusivelyParseObjectValue(value, `${fieldPath}.${key}`, result);\n  });\n  return input;\n}\n","import {\n  IFirebaseWrapper,\n} from './IFirebaseWrapper';\n\nimport firebase from 'firebase/compat/app';\nimport 'firebase/compat/auth';\nimport 'firebase/compat/firestore';\nimport 'firebase/compat/storage';\n\nimport { log } from 'misc';\nimport { RAFirebaseOptions } from 'providers/options';\nimport {\n  FireApp,\n  FireAuth,\n  FireAuthUserCredentials,\n  FireStorage,\n  FireStoragePutFileResult,\n  FireStore,\n  FireStoreBatch,\n  FireStoreCollectionRef,\n  FireUploadTaskSnapshot,\n  FireUser\n} from 'misc/firebase-models';\n\nexport class FirebaseWrapper implements IFirebaseWrapper {\n  private firestore: FireStore;\n  private app: FireApp;\n  public options: RAFirebaseOptions;\n\n  constructor(\n    inputOptions: RAFirebaseOptions | undefined,\n    firebaseConfig: {},\n  ) { \n    const optionsSafe = inputOptions || {};\n    this.options = optionsSafe;\n    this.app = (window as any)['_app'] = ObtainFirebaseApp(firebaseConfig, optionsSafe);\n    this.firestore = this.app.firestore();\n  }\n  dbGetCollection(absolutePath: string): FireStoreCollectionRef {\n    return this.firestore.collection(absolutePath);\n  }\n  dbCreateBatch(): FireStoreBatch {\n    return this.firestore.batch();\n  }\n  dbMakeNewId(): string {\n    return this.firestore.collection(\"collections\").doc().id\n  }\n\n  public OnUserLogout(callBack: (u: FireUser | null) => any) {\n    this.app.auth().onAuthStateChanged((user) => {\n      const isLoggedOut = !user;\n      log('FirebaseWrapper.OnUserLogout', { user, isLoggedOut });\n      if (isLoggedOut) {\n        callBack(user);\n      }\n    });\n  }\n  putFile(storagePath: string, rawFile: any): FireStoragePutFileResult {\n    const task = this.app.storage().ref(storagePath).put(rawFile);\n    const taskResult = new Promise<FireUploadTaskSnapshot>(\n      (res, rej) => task.then(res).catch(rej)\n    );\n    const downloadUrl = taskResult.then(t => t.ref.getDownloadURL()).then(url => url as string)\n    return {\n      task,\n      taskResult,\n      downloadUrl,\n    }\n  }\n  async getStorageDownloadUrl(fieldSrc: string): Promise<string> {\n    return this.app.storage().ref(fieldSrc).getDownloadURL();\n  }\n  public serverTimestamp() {\n    // This line doesn't work for some reason, might be firebase sdk.\n    return firebase.firestore.FieldValue.serverTimestamp();\n  }\n  async authSetPersistence(persistenceInput: 'session' | 'local' | 'none') {\n    let persistenceResolved: string;\n    switch (persistenceInput) {\n      case 'local':\n        persistenceResolved = firebase.auth.Auth.Persistence.LOCAL;\n        break;\n      case 'none':\n        persistenceResolved = firebase.auth.Auth.Persistence.NONE;\n        break;\n      case 'session':\n      default:\n        persistenceResolved = firebase.auth.Auth.Persistence.SESSION;\n        break;\n    }\n    log('setPersistence', { persistenceInput, persistenceResolved });\n    return this.app.auth()\n      .setPersistence(persistenceResolved)\n      .catch((error) => console.error(error));\n  }\n  async authSigninEmailPassword(email: string, password: string): Promise<FireAuthUserCredentials> {\n    const user = await this.app.auth().signInWithEmailAndPassword(\n      email,\n      password\n    );\n    return user;\n  }\n  async authSignOut(): Promise<void> {\n    return this.app.auth().signOut();\n  }\n  async authGetUserLoggedIn(): Promise<FireUser> {\n    return new Promise((resolve, reject) => {\n      const auth = this.app.auth();\n      if (auth.currentUser) return resolve(auth.currentUser);\n      const unsubscribe = this.app.auth().onAuthStateChanged((user) => {\n        unsubscribe();\n        if (user) {\n          resolve(user);\n        } else {\n          reject();\n        }\n      });\n    });\n  }\n  public async GetUserLogin(): Promise<FireUser> {\n    return this.authGetUserLoggedIn();\n  }\n\n  /** @deprecated */\n  public auth(): FireAuth {\n    return this.app.auth();\n  }\n  /** @deprecated */\n  public storage(): FireStorage {\n    return this.app.storage();\n  }\n  /** @deprecated */\n  public GetApp(): FireApp {\n    return this.app;\n  }\n  /** @deprecated */\n  public db(): FireStore {\n    return this.firestore;\n  }\n}\n\nfunction ObtainFirebaseApp(\n  firebaseConfig: {},\n  options: RAFirebaseOptions\n): firebase.app.App {\n  if (options.app) {\n    return options.app;\n  }\n  const isInitialized = !!firebase.apps?.length;\n  if (isInitialized) {\n    return firebase.app();\n  } else {\n    return firebase.initializeApp(firebaseConfig);\n  }\n}\n","import firebase from 'firebase/compat/app';\nimport 'firebase/compat/storage';\n\nexport type FireUser = firebase.User;\nexport type FireApp = firebase.app.App;\n\nexport type FireStorage = firebase.storage.Storage;\nexport type FireStorageReference = firebase.storage.Reference;\nexport type FireUploadTaskSnapshot = firebase.storage.UploadTaskSnapshot;\nexport type FireUploadTask = firebase.storage.UploadTask;\nexport type FireStoragePutFileResult = {\n  task: FireUploadTask, \n  taskResult: Promise<FireUploadTaskSnapshot>,\n  downloadUrl: Promise<string>,\n}\n\nexport type FireAuth = firebase.auth.Auth;\nexport type FireAuthUserCredentials = firebase.auth.UserCredential;\n\nexport type FireStore = firebase.firestore.Firestore;\nexport type FireStoreBatch = firebase.firestore.WriteBatch;\nexport type FireStoreTimeStamp = firebase.firestore.FieldValue;\nexport type FireStoreDocumentRef = firebase.firestore.DocumentReference;\nexport type FireStoreDocumentSnapshot = firebase.firestore.DocumentSnapshot<firebase.firestore.DocumentData>;\nexport type FireStoreCollectionRef = firebase.firestore.CollectionReference;\nexport type FireStoreQueryDocumentSnapshot = firebase.firestore.QueryDocumentSnapshot;\nexport type FireStoreQuery = firebase.firestore.Query;\nexport type FireStoreQueryOrder = firebase.firestore.OrderByDirection;\n\nexport const TASK_PAUSED = firebase.storage.TaskState.PAUSED\nexport const TASK_RUNNING = firebase.storage.TaskState.RUNNING\nexport const TASK_CANCELED = firebase.storage.TaskState.CANCELED\n","import { RAFirebaseOptions } from '../options';\nimport { IFirebaseWrapper } from './firebase/IFirebaseWrapper';\nimport {\n  log,\n  getAbsolutePath,\n  messageTypes,\n  logWarn,\n  IFirestoreLogger,\n  parseFireStoreDocument,\n} from '../../misc';\nimport { FireStoreCollectionRef } from 'misc/firebase-models';\n\ntype IResourceItem = {} & { id: string, deleted?: boolean };\nexport interface IResource {\n  path: string;\n  pathAbsolute: string;\n  collection: FireStoreCollectionRef;\n  list: Array<IResourceItem>;\n}\n\nexport class ResourceManager {\n  private resources: Record<string, IResource> = {};\n\n  constructor(\n    private fireWrapper: IFirebaseWrapper,\n    private options: RAFirebaseOptions,\n    private flogger: IFirestoreLogger\n  ) {\n    this.fireWrapper.OnUserLogout(() => {\n      this.resources = {};\n    });\n  }\n\n  public async TryGetResource(\n    resourceName: string,\n    refresh?: 'REFRESH',\n    collectionQuery?: messageTypes.CollectionQueryType\n  ): Promise<IResource> {\n    if (refresh) {\n      await this.RefreshResource(resourceName, collectionQuery);\n    }\n    return this.TryGetResourcePromise(resourceName, collectionQuery);\n  }\n\n  public GetResource(relativePath: string): IResource {\n    const resource: IResource = this.resources[relativePath];\n    if (!resource) {\n      throw new Error(\n        `react-admin-firebase: Can't find resource: \"${relativePath}\"`\n      );\n    }\n    return resource;\n  }\n\n  public async TryGetResourcePromise(\n    relativePath: string,\n    collectionQuery?: messageTypes.CollectionQueryType\n  ): Promise<IResource> {\n    log('resourceManager.TryGetResourcePromise', {\n      relativePath,\n      collectionQuery,\n    });\n    await this.initPath(relativePath);\n\n    const resource: IResource = this.resources[relativePath];\n    if (!resource) {\n      throw new Error(\n        `react-admin-firebase: Cant find resource: \"${relativePath}\"`\n      );\n    }\n    return resource;\n  }\n\n  public async RefreshResource(\n    relativePath: string,\n    collectionQuery: messageTypes.CollectionQueryType | undefined\n  ) {\n    if (this.options?.lazyLoading?.enabled) {\n      logWarn('resourceManager.RefreshResource', {\n        warn: 'RefreshResource is not available in lazy loading mode',\n      });\n      throw new Error(\n        'react-admin-firebase: RefreshResource is not available in lazy loading mode'\n      );\n    }\n\n    log('resourceManager.RefreshResource', { relativePath, collectionQuery });\n    await this.initPath(relativePath);\n    const resource = this.resources[relativePath];\n\n    const collection = resource.collection;\n    const query = this.applyQuery(collection, collectionQuery);\n    const newDocs = await query.get();\n\n    resource.list = newDocs.docs.map((doc) => parseFireStoreDocument<IResourceItem>(doc));\n    const count = newDocs.docs.length;\n    this.flogger.logDocument(count)();\n    log('resourceManager.RefreshResource', {\n      newDocs,\n      resource,\n      collectionPath: collection.path,\n    });\n  }\n\n  public async GetSingleDoc(relativePath: string, docId: string) {\n    await this.initPath(relativePath);\n    const resource = this.GetResource(relativePath);\n    this.flogger.logDocument(1)();\n    const docSnap = await resource.collection.doc(docId).get();\n    if (!docSnap.exists) {\n      throw new Error('react-admin-firebase: No id found matching: ' + docId);\n    }\n    const result = parseFireStoreDocument(docSnap);\n    log('resourceManager.GetSingleDoc', {\n      relativePath,\n      resource,\n      docId,\n      docSnap,\n      result,\n    });\n    return result;\n  }\n\n  private async initPath(relativePath: string): Promise<void> {\n    const rootRef = this.options && this.options.rootRef;\n    const absolutePath = getAbsolutePath(rootRef, relativePath);\n    const hasBeenInited = !!this.resources[relativePath];\n    log('resourceManager.initPath()', {\n      absolutePath,\n      hasBeenInited,\n    });\n    if (hasBeenInited) {\n      log('resourceManager.initPath() has been initialized already...');\n      return;\n    }\n    const collection = this.fireWrapper.dbGetCollection(absolutePath);\n    const list: Array<IResourceItem> = [];\n    const resource: IResource = {\n      collection,\n      list,\n      path: relativePath,\n      pathAbsolute: absolutePath,\n    };\n    this.resources[relativePath] = resource;\n    log('resourceManager.initPath() setting resource...', {\n      resource,\n      allResources: this.resources,\n      collection: collection,\n      collectionPath: collection.path,\n    });\n  }\n\n  public async getUserIdentifier(): Promise<string> {\n    const identifier = this.options.associateUsersById\n      ? await this.getCurrentUserId()\n      : await this.getCurrentUserEmail();\n    return identifier;\n  }\n\n  private async getCurrentUserEmail() {\n    const user = await this.fireWrapper.authGetUserLoggedIn();\n    if (user) {\n      return user.email as string;\n    } else {\n      return 'annonymous user';\n    }\n  }\n  private async getCurrentUserId() {\n    const user = await this.fireWrapper.authGetUserLoggedIn();\n    if (user) {\n      return user.uid;\n    } else {\n      return 'annonymous user';\n    }\n  }\n\n  private applyQuery(\n    collection: FireStoreCollectionRef,\n    collectionQuery?: messageTypes.CollectionQueryType\n  ): FireStoreCollectionRef {\n    const collRef = collectionQuery ? collectionQuery(collection) : collection;\n\n    log('resourceManager.applyQuery() ...', {\n      collection,\n      collectionQuery: (collectionQuery || '-').toString(),\n      collRef,\n    });\n    return collRef;\n  }\n}\n","import { set, get } from \"lodash\";\nimport { TASK_CANCELED, TASK_PAUSED, TASK_RUNNING } from \"../../misc/firebase-models\";\nimport {\n  AddCreatedByFields,\n  AddUpdatedByFields,\n  IFirestoreLogger,\n  joinPaths,\n  log,\n  logError,\n  dispatch,\n  translateDocToFirestore,\n} from \"../../misc\";\nimport { RAFirebaseOptions } from \"../options\";\nimport { IFirebaseWrapper } from \"./firebase/IFirebaseWrapper\";\nimport { IResource, ResourceManager } from \"./ResourceManager\";\n\nexport class FireClient {\n  public rm: ResourceManager;\n\n  constructor(\n    public fireWrapper: IFirebaseWrapper,\n    public options: RAFirebaseOptions,\n    public flogger: IFirestoreLogger\n  ) {\n    this.rm = new ResourceManager(this.fireWrapper, this.options, this.flogger);\n  }\n\n  public checkRemoveIdField(obj: any, docId: string) {\n    if (!this.options.dontAddIdFieldToDoc) {\n      obj.id = docId;\n    }\n  }\n\n  public transformToDb(resourceName: string, documentData: any, docId: string): any {\n    if (typeof this.options.transformToDb === 'function') {\n      return this.options.transformToDb(resourceName, documentData, docId);\n    }\n    return documentData;\n  }\n\n  public async parseDataAndUpload(r: IResource, id: string, data: any) {\n    if (!data) {\n      return data;\n    }\n    const docPath = r.collection.doc(id).path;\n\n    const result = translateDocToFirestore(data);\n    const uploads = result.uploads;\n    await Promise.all(\n      uploads.map(async (u) => {\n\n        const fileNameBits = u.rawFile instanceof File ? u.rawFile.name.split('.') : [];\n\n        const fileExtension = !fileNameBits?.length ? '' : '.' + fileNameBits.pop();\n\n        const link = await this.uploadAndGetLink(\n          u.rawFile,\n          docPath,\n          u.fieldSlashesPath + fileExtension,\n          !!this.options.useFileNamesInStorage\n        );\n        set(data, u.fieldDotsPath + \".src\", link);\n      })\n    );\n    return data;\n  }\n\n  public async addCreatedByFields(obj: any) {\n    return AddCreatedByFields(obj, this.fireWrapper, this.rm, this.options);\n  }\n\n  public async addUpdatedByFields(obj: any) {\n    return AddUpdatedByFields(obj, this.fireWrapper, this.rm, this.options);\n  }\n\n  private async uploadAndGetLink(\n    rawFile: any,\n    docPath: string,\n    fieldPath: string,\n    useFileName: boolean\n  ): Promise<string | undefined> {\n    const storagePath = useFileName\n      ? joinPaths(docPath, fieldPath, rawFile.name)\n      : joinPaths(docPath, fieldPath);\n    return this.saveFile(storagePath, rawFile);\n  }\n\n  private async saveFile(\n    storagePath: string,\n    rawFile: any\n  ): Promise<string | undefined> {\n    log(\"saveFile() saving file...\", { storagePath, rawFile });\n    try {\n      const { task, taskResult, downloadUrl } = this.fireWrapper.putFile(storagePath, rawFile);\n      const { name } = rawFile;\n      // monitor upload status & progress\n      dispatch('FILE_UPLOAD_WILL_START', name);\n      task.on('state_changed', (snapshot) => {\n        const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n        log('Upload is ' + progress + '% done');\n        dispatch('FILE_UPLOAD_PROGRESS', name, progress);\n        switch (snapshot.state) {\n          case TASK_PAUSED:\n            log('Upload is paused');\n            dispatch('FILE_UPLOAD_PAUSED', name);\n            break;\n          case TASK_RUNNING:\n            log('Upload is running');\n            dispatch('FILE_UPLOAD_RUNNING', name);\n            break;\n          case TASK_CANCELED:\n            log('Upload has been canceled');\n            dispatch('FILE_UPLOAD_CANCELED', name);\n            break;\n          // case storage.TaskState.ERROR:\n            // already handled by catch\n          // case storage.TaskState.SUCCESS:\n            // already handled by then\n        }\n      });\n      const [getDownloadURL] = await Promise.all([\n        downloadUrl,\n        taskResult,\n      ]);\n      dispatch('FILE_UPLOAD_COMPLETE', name);\n      dispatch('FILE_SAVED', name);\n      log(\"saveFile() saved file\", {\n        storagePath,\n        taskResult,\n        getDownloadURL,\n      });\n      return this.options.relativeFilePaths ? storagePath : getDownloadURL;\n    } catch (storageError) {\n      if (get(storageError, 'code') === \"storage/unknown\") {\n        logError(\n          'saveFile() error saving file, No bucket found! Try clicking \"Get Started\" in firebase -> storage',\n          { storageError }\n        );\n      } else {\n        logError(\"saveFile() error saving file\", {\n          storageError,\n        });\n      }\n    }\n  }\n}\n","import { RAFirebaseOptions } from \"index\";\nimport { IFirebaseWrapper, ResourceManager } from \"providers/database\";\n\nexport async function AddCreatedByFields(\n  obj: any,\n  fireWrapper: IFirebaseWrapper,\n  rm: Pick<ResourceManager, \"getUserIdentifier\">,\n  options: Pick<\n    RAFirebaseOptions,\n    | \"associateUsersById\"\n    | \"disableMeta\"\n    | \"renameMetaFields\"\n    | \"metaFieldCasing\"\n  >\n) {\n  if (options.disableMeta) {\n    return;\n  }\n  const currentUserIdentifier = await rm.getUserIdentifier();\n  const createAtSelector = GetSelectorsCreateAt(options);\n  const createBySelector = GetSelectorsCreateBy(options);\n  obj[createAtSelector] = fireWrapper.serverTimestamp();\n  obj[createBySelector] = currentUserIdentifier;\n}\n\nexport async function AddUpdatedByFields(\n  obj: any,\n  fireWrapper: IFirebaseWrapper,\n  rm: Pick<ResourceManager, \"getUserIdentifier\">,\n  options: Pick<\n    RAFirebaseOptions,\n    | \"associateUsersById\"\n    | \"disableMeta\"\n    | \"renameMetaFields\"\n    | \"metaFieldCasing\"\n  >\n) {\n  if (options.disableMeta) {\n    return;\n  }\n  const currentUserIdentifier = await rm.getUserIdentifier();\n  const updateAtSelector = GetSelectorsUpdateAt(options);\n  const updateBySelector = GetSelectorsUpdateBy(options);\n  obj[updateAtSelector] = fireWrapper.serverTimestamp();\n  obj[updateBySelector] = currentUserIdentifier;\n}\n\nexport function GetSelectorsUpdateAt(\n  options: Pick<RAFirebaseOptions, \"metaFieldCasing\" | \"renameMetaFields\">\n): string {\n  if (options.renameMetaFields && options.renameMetaFields.updated_at) {\n    return options.renameMetaFields.updated_at;\n  }\n  const casing = options.metaFieldCasing;\n  const defautCase = \"lastupdate\";\n  if (!casing) {\n    return defautCase;\n  }\n  if (casing === \"camel\") {\n    return \"lastUpdate\";\n  }\n  if (casing === \"snake\") {\n    return \"last_update\";\n  }\n  if (casing === \"pascal\") {\n    return \"LastUpdate\";\n  }\n  if (casing === \"kebab\") {\n    return \"last-update\";\n  }\n  return defautCase;\n}\n\nexport function GetSelectorsUpdateBy(\n  options: Pick<RAFirebaseOptions, \"metaFieldCasing\" | \"renameMetaFields\">\n): string {\n  if (options.renameMetaFields && options.renameMetaFields.updated_by) {\n    return options.renameMetaFields.updated_by;\n  }\n  const casing = options.metaFieldCasing;\n  const defautCase = \"updatedby\";\n  if (!casing) {\n    return defautCase;\n  }\n  if (casing === \"camel\") {\n    return \"updatedBy\";\n  }\n  if (casing === \"snake\") {\n    return \"updated_by\";\n  }\n  if (casing === \"pascal\") {\n    return \"UpdatedBy\";\n  }\n  if (casing === \"kebab\") {\n    return \"updated-by\";\n  }\n  return defautCase;\n}\n\nexport function GetSelectorsCreateAt(\n  options: Pick<RAFirebaseOptions, \"metaFieldCasing\" | \"renameMetaFields\">\n): string {\n  if (options.renameMetaFields && options.renameMetaFields.created_at) {\n    return options.renameMetaFields.created_at;\n  }\n  const casing = options.metaFieldCasing;\n  const defautCase = \"createdate\";\n  if (!casing) {\n    return defautCase;\n  }\n  if (casing === \"camel\") {\n    return \"createDate\";\n  }\n  if (casing === \"snake\") {\n    return \"create_date\";\n  }\n  if (casing === \"pascal\") {\n    return \"CreateDate\";\n  }\n  if (casing === \"kebab\") {\n    return \"create-date\";\n  }\n  return defautCase;\n}\n\nexport function GetSelectorsCreateBy(\n  options: Pick<RAFirebaseOptions, \"metaFieldCasing\" | \"renameMetaFields\">\n): string {\n  if (options.renameMetaFields && options.renameMetaFields.created_by) {\n    return options.renameMetaFields.created_by;\n  }\n  const casing = options.metaFieldCasing;\n  const defautCase = \"createdby\";\n  if (!casing) {\n    return defautCase;\n  }\n  if (casing === \"camel\") {\n    return \"createdBy\";\n  }\n  if (casing === \"snake\") {\n    return \"created_by\";\n  }\n  if (casing === \"pascal\") {\n    return \"CreatedBy\";\n  }\n  if (casing === \"kebab\") {\n    return \"created-by\";\n  }\n  return defautCase;\n}\n","import { FireStoreCollectionRef, FireStoreDocumentSnapshot, FireStoreQuery } from 'misc/firebase-models';\nimport { IFirestoreLogger, messageTypes } from '../../misc';\n\nexport function setQueryCursor(\n  doc: FireStoreDocumentSnapshot,\n  params: messageTypes.IParamsGetList,\n  resourceName: string\n) {\n  const key = btoa(JSON.stringify({ ...params, resourceName }));\n  localStorage.setItem(key, doc.id);\n\n  const allCursorsKey = `ra-firebase-cursor-keys_${resourceName}`;\n  const localCursorKeys = localStorage.getItem(allCursorsKey);\n  if (!localCursorKeys) {\n    localStorage.setItem(allCursorsKey, JSON.stringify([key]));\n  } else {\n    const cursors: string[] = JSON.parse(localCursorKeys);\n    const newCursors = cursors.concat(key);\n    localStorage.setItem(allCursorsKey, JSON.stringify(newCursors));\n  }\n}\n\nexport async function getQueryCursor(\n  collection: FireStoreCollectionRef,\n  params: messageTypes.IParamsGetList,\n  resourceName: string,\n  flogger: IFirestoreLogger\n): Promise<FireStoreDocumentSnapshot | false> {\n  const key = btoa(JSON.stringify({ ...params, resourceName }));\n  const docId = localStorage.getItem(key);\n  if (!docId) {\n    return false;\n  }\n\n  const doc = await collection.doc(docId).get();\n  flogger.logDocument(1)();\n  if (doc.exists) {\n    // incrementFirebaseReadsCounter(1);\n    return doc;\n  }\n  return false;\n}\n\nexport function clearQueryCursors(resourceName: string) {\n  const allCursorsKey = `ra-firebase-cursor-keys_${resourceName}`;\n  const localCursorKeys = localStorage.getItem(allCursorsKey);\n  if (localCursorKeys) {\n    const cursors: string[] = JSON.parse(localCursorKeys);\n    cursors.forEach((cursor) => localStorage.removeItem(cursor));\n    localStorage.removeItem(allCursorsKey);\n  }\n}\n\nexport async function findLastQueryCursor(\n  collection: FireStoreCollectionRef,\n  queryBase: FireStoreQuery,\n  params: messageTypes.IParamsGetList,\n  resourceName: string,\n  flogger: IFirestoreLogger\n) {\n  const { page, perPage } = params.pagination;\n\n  let lastQueryCursor: FireStoreDocumentSnapshot | false = false;\n  let currentPage = page - 1;\n\n  const currentPageParams = {\n    ...params,\n    pagination: {\n      ...params.pagination,\n    },\n  };\n  while (!lastQueryCursor && currentPage > 1) {\n    currentPage--;\n    currentPageParams.pagination.page = currentPage;\n    console.log('getting query cursor currentPage=', currentPage);\n    lastQueryCursor = await getQueryCursor(\n      collection,\n      currentPageParams,\n      resourceName,\n      flogger\n    );\n  }\n  const limit = (page - currentPage) * perPage;\n  const isFirst = currentPage === 1;\n\n  function getQuery() {\n    if (isFirst) {\n      return queryBase.limit(limit);\n    } else {\n      return queryBase.startAt(lastQueryCursor).limit(limit);\n    }\n  }\n\n  const newQuery = getQuery();\n  const snapshots = await newQuery.get();\n  const docsLength = snapshots.docs.length;\n  flogger.logDocument(docsLength)();\n  const lastDocIndex = docsLength - 1;\n  const lastDocRef = snapshots.docs[lastDocIndex];\n  return lastDocRef;\n}\n","import { FireStoreCollectionRef, FireStoreQuery, FireStoreQueryOrder } from 'misc/firebase-models';\nimport { IFirestoreLogger, messageTypes } from '../../misc';\nimport { findLastQueryCursor, getQueryCursor } from './queryCursors';\n\ninterface ParamsToQueryOptions {\n  filters?: boolean;\n  sort?: boolean;\n  pagination?: boolean;\n}\n\nconst defaultParamsToQueryOptions = {\n  filters: true,\n  sort: true,\n  pagination: true,\n};\n\nexport async function paramsToQuery<\n  TParams extends messageTypes.IParamsGetList\n>(\n  collection: FireStoreCollectionRef,\n  params: TParams,\n  resourceName: string,\n  flogger: IFirestoreLogger,\n  options: ParamsToQueryOptions = defaultParamsToQueryOptions\n): Promise<FireStoreQuery> {\n  const filtersStepQuery = options.filters\n    ? filtersToQuery(collection, params.filter)\n    : collection;\n\n  const sortStepQuery = options.sort\n    ? sortToQuery(filtersStepQuery, params.sort)\n    : filtersStepQuery;\n\n  return options.pagination\n    ? paginationToQuery(\n        sortStepQuery,\n        params,\n        collection,\n        resourceName,\n        flogger\n      )\n    : sortStepQuery;\n}\n\nexport function filtersToQuery(\n  query: FireStoreQuery,\n  filters: { [fieldName: string]: any }\n): FireStoreQuery {\n  const res = Object.entries(filters).reduce((acc,[fieldName, fieldValue]) => {\n    const opStr = fieldValue && Array.isArray(fieldValue) ? 'in' : '==';\n    return acc.where(fieldName, opStr, fieldValue);\n  }, query);\n  return res;\n}\n\nexport function sortToQuery(\n  query: FireStoreQuery,\n  sort: { field: string; order: string }\n): FireStoreQuery {\n  if (sort != null && sort.field !== 'id') {\n    const { field, order } = sort;\n    const parsedOrder = order.toLocaleLowerCase() as FireStoreQueryOrder;\n    return query.orderBy(field, parsedOrder);\n  }\n  return query;\n}\n\nasync function paginationToQuery<TParams extends messageTypes.IParamsGetList>(\n  query: FireStoreQuery,\n  params: TParams,\n  collection: FireStoreCollectionRef,\n  resourceName: string,\n  flogger: IFirestoreLogger\n): Promise<FireStoreQuery> {\n  const { page, perPage } = params.pagination;\n  if (page === 1) {\n    query = query.limit(perPage);\n  } else {\n    let queryCursor = await getQueryCursor(\n      collection,\n      params,\n      resourceName,\n      flogger\n    );\n    if (!queryCursor) {\n      queryCursor = await findLastQueryCursor(\n        collection,\n        query,\n        params,\n        resourceName,\n        flogger\n      );\n    }\n    query = query.startAfter(queryCursor).limit(perPage);\n  }\n\n  return query;\n}\n\nexport function getFullParamsForQuery<\n  TParams extends messageTypes.IParamsGetList\n>(reactAdminParams: TParams, softdeleteEnabled: boolean): TParams {\n  return {\n    ...reactAdminParams,\n    filter: softdeleteEnabled\n      ? {\n          deleted: false,\n          ...reactAdminParams.filter,\n        }\n      : reactAdminParams.filter,\n  };\n}\n\nexport function getNextPageParams<TParams extends messageTypes.IParamsGetList>(\n  params: TParams\n): TParams {\n  return {\n    ...params,\n    pagination: {\n      ...params.pagination,\n      page: params.pagination.page + 1,\n    },\n  };\n}\n","import {\n  log,\n  messageTypes,\n  parseFireStoreDocument,\n  recursivelyMapStorageUrls,\n} from '../../misc';\nimport { IResource, ResourceManager } from '../database/ResourceManager';\nimport { RAFirebaseOptions } from '../options';\nimport * as ra from '../../misc/react-admin-models';\nimport {\n  getFullParamsForQuery,\n  getNextPageParams,\n  paramsToQuery,\n} from './paramsToQuery';\nimport { clearQueryCursors, setQueryCursor } from './queryCursors';\nimport { FireClient } from 'providers/database';\nimport { FireStoreCollectionRef, FireStoreDocumentSnapshot } from 'misc/firebase-models';\n\nexport class FirebaseLazyLoadingClient {\n  constructor(\n    private readonly options: RAFirebaseOptions,\n    private readonly rm: ResourceManager,\n    private client: FireClient\n  ) {}\n\n  public async apiGetList<T extends ra.Record>(\n    resourceName: string,\n    reactAdminParams: ra.GetListParams\n  ): Promise<ra.GetListResult<T>> {\n    const r = await this.tryGetResource(resourceName);\n    const params = getFullParamsForQuery(\n      reactAdminParams,\n      !!this.options.softDelete\n    );\n\n    log('apiGetListLazy', { resourceName, params });\n\n    const query = await paramsToQuery(\n      r.collection,\n      params,\n      resourceName,\n      this.client.flogger\n    );\n\n    const snapshots = await query.get();\n\n    const resultsCount = snapshots.docs.length;\n    if (!resultsCount) {\n      log('apiGetListLazy', {\n        message: 'There are not records for given query',\n      });\n      return { data: [], total: 0 };\n    }\n    this.client.flogger.logDocument(resultsCount)();\n\n    const data = snapshots.docs.map(doc => parseFireStoreDocument<T>(doc));\n    const nextPageCursor = snapshots.docs[snapshots.docs.length - 1];\n    // After fetching documents save queryCursor for next page\n    setQueryCursor(nextPageCursor, getNextPageParams(params), resourceName);\n    // Hardcoded to allow next pages, as we don't have total number of items\n    let total = 9000;\n\n    // Check for next pages\n    // If it's last page, we can count all items and disable going to next page\n    const isOnLastPage = await this.checkIfOnLastPage(\n      r.collection,\n      params,\n      resourceName,\n      nextPageCursor\n    );\n\n    if (isOnLastPage) {\n      const { page, perPage } = params.pagination;\n      total = (page - 1) * perPage + data.length;\n      log('apiGetListLazy', { message: \"It's last page of collection.\" });\n    }\n\n    if (this.options.relativeFilePaths) {\n      const parsedData = await Promise.all(\n        data.map(async (doc: any) => {\n          for (let fieldName in doc) {\n            doc[fieldName] = await recursivelyMapStorageUrls(\n              this.client.fireWrapper,\n              doc[fieldName]\n            );\n          }\n          return doc;\n        })\n      );\n\n      log('apiGetListLazy result', {\n        docs: parsedData,\n        resource: r,\n        collectionPath: r.collection.path,\n      });\n\n      return {\n        data: parsedData,\n        total,\n      };\n    }\n\n    log('apiGetListLazy result', {\n      docs: data,\n      resource: r,\n      collectionPath: r.collection.path,\n    });\n\n    return { data, total };\n  }\n\n  public async apiGetManyReference(\n    resourceName: string,\n    reactAdminParams: messageTypes.IParamsGetManyReference\n  ): Promise<messageTypes.IResponseGetManyReference> {\n    const r = await this.tryGetResource(resourceName);\n    log('apiGetManyReferenceLazy', {\n      resourceName,\n      resource: r,\n      reactAdminParams,\n    });\n    const filterWithTarget = {\n      ...reactAdminParams.filter,\n      [reactAdminParams.target]: reactAdminParams.id,\n    };\n    const params = getFullParamsForQuery(\n      {\n        ...reactAdminParams,\n        filter: filterWithTarget,\n      },\n      !!this.options.softDelete\n    );\n\n    const query = await paramsToQuery(\n      r.collection,\n      params,\n      resourceName,\n      this.client.flogger\n    );\n\n    const snapshots = await query.get();\n    const resultsCount = snapshots.docs.length;\n    this.client.flogger.logDocument(resultsCount)();\n    const data = snapshots.docs.map(d => parseFireStoreDocument(d));\n    if (this.options.relativeFilePaths) {\n      const parsedData = await Promise.all(\n        data.map(async (doc: any) => {\n          for (let fieldName in doc) {\n            doc[fieldName] = await recursivelyMapStorageUrls(\n              this.client.fireWrapper,\n              doc[fieldName]\n            );\n          }\n          return doc;\n        })\n      );\n\n      log('apiGetManyReferenceLazy result', {\n        docs: parsedData,\n        resource: r,\n        collectionPath: r.collection.path,\n      });\n\n      return {\n        data: parsedData,\n        total: data.length,\n      };\n    }\n\n    log('apiGetManyReferenceLazy result', {\n      docs: data,\n      resource: r,\n      collectionPath: r.collection.path,\n    });\n    return { data, total: data.length };\n  }\n\n  private async checkIfOnLastPage<TParams extends messageTypes.IParamsGetList>(\n    collection: FireStoreCollectionRef,\n    params: TParams,\n    resourceName: string,\n    nextPageCursor: FireStoreDocumentSnapshot,\n  ): Promise<boolean> {\n    const query = await paramsToQuery(\n      collection,\n      params,\n      resourceName,\n      this.client.flogger,\n      {\n        filters: true,\n        sort: true,\n      }\n    );\n    if (!nextPageCursor) {\n      throw new Error('Page cursor was empty...');\n    }\n    const nextElementSnapshot = await query\n      .startAfter(nextPageCursor)\n      .limit(1)\n      .get();\n\n    if (!nextElementSnapshot.empty) {\n      // this.incrementFirebaseReadsCounter(1);\n    }\n\n    return nextElementSnapshot.empty;\n  }\n\n  public clearQueryCursors(resourceName: string) {\n    clearQueryCursors(resourceName);\n  }\n\n  private async tryGetResource(\n    resourceName: string,\n    collectionQuery?: messageTypes.CollectionQueryType\n  ): Promise<IResource> {\n    return this.rm.TryGetResourcePromise(resourceName, collectionQuery);\n  }\n}\n","import {\n  getAbsolutePath,\n  log,\n  logger,\n  retrieveStatusCode,\n  logError,\n  MakeFirestoreLogger,\n} from \"../misc\";\nimport * as ra from \"../misc/react-admin-models\";\nimport { RAFirebaseOptions } from \"./options\";\nimport { FirebaseWrapper } from \"./database/firebase/FirebaseWrapper\";\nimport { FireApp } from \"../misc/firebase-models\";\nimport { FireClient } from \"./database/FireClient\";\nimport { GetList, GetMany, GetManyReference, GetOne } from \"./queries\";\nimport { Create, Delete, DeleteMany, Update, UpdateMany } from \"./commands\";\n\nexport interface IDataProvider extends ra.DataProvider {\n  app: FireApp;\n}\n\nexport function DataProvider(\n  firebaseConfig: {},\n  optionsInput?: RAFirebaseOptions\n): IDataProvider {\n  const options = optionsInput || {};\n  verifyDataProviderArgs(firebaseConfig, options);\n\n  const flogger = MakeFirestoreLogger(options);\n  logger.SetEnabled(!!options?.logging);\n  flogger.SetEnabled(!!options?.firestoreCostsLogger?.enabled);\n  flogger.ResetCount(!options?.firestoreCostsLogger?.persistCount);\n  log('Creating FirebaseDataProvider', {\n    firebaseConfig,\n    options\n  });\n\n  const fireWrapper = new FirebaseWrapper(optionsInput, firebaseConfig);\n\n  async function run<T>(cb: () => Promise<T>) {\n    let res: any;\n    try {\n      res = await cb();\n      return res;\n    } catch (error) {\n      const errorMsg = ((error as any) || '').toString();\n      const code = retrieveStatusCode(errorMsg);\n      const errorObj = { status: code, message: errorMsg, json: res };\n      logError(\"DataProvider:\", error, { errorMsg, code, errorObj });\n      throw errorObj;\n    }\n  }\n  const client = new FireClient(fireWrapper, options, flogger);\n\n  const newProviderApi: IDataProvider = {\n    app: fireWrapper.GetApp(),\n    getList<RecordType extends ra.Record = ra.Record>(\n      resource: string,\n      params: ra.GetListParams\n    ): Promise<ra.GetListResult<RecordType>> {\n      return run(() => GetList<RecordType>(resource, params, client));\n    },\n    getOne<RecordType extends ra.Record = ra.Record>(\n      resource: string,\n      params: ra.GetOneParams\n    ): Promise<ra.GetOneResult<RecordType>> {\n      return run(() => GetOne<RecordType>(resource, params, client));\n    },\n    getMany<RecordType extends ra.Record = ra.Record>(\n      resource: string,\n      params: ra.GetManyParams\n    ): Promise<ra.GetManyResult<RecordType>> {\n      return run(() => GetMany<RecordType>(resource, params, client));\n    },\n    getManyReference<RecordType extends ra.Record = ra.Record>(\n      resource: string,\n      params: ra.GetManyReferenceParams\n    ): Promise<ra.GetManyReferenceResult<RecordType>> {\n      return run(() =>\n        GetManyReference<RecordType>(resource, params, client)\n      );\n    },\n    update<RecordType extends ra.Record = ra.Record>(\n      resource: string,\n      params: ra.UpdateParams\n    ): Promise<ra.UpdateResult<RecordType>> {\n      return run(() => Update<RecordType>(resource, params, client));\n    },\n    updateMany(\n      resource: string,\n      params: ra.UpdateManyParams\n    ): Promise<ra.UpdateManyResult> {\n      return run(() => UpdateMany(resource, params, client));\n    },\n    create<RecordType extends ra.Record = ra.Record>(\n      resource: string,\n      params: ra.CreateParams\n    ): Promise<ra.CreateResult<RecordType>> {\n      return run(() => Create<RecordType>(resource, params, client));\n    },\n    delete<RecordType extends ra.Record = ra.Record>(\n      resource: string,\n      params: ra.DeleteParams\n    ): Promise<ra.DeleteResult<RecordType>> {\n      return run(() => Delete(resource, params, client));\n    },\n    deleteMany(\n      resource: string,\n      params: ra.DeleteManyParams\n    ): Promise<ra.DeleteManyResult> {\n      return run(() => DeleteMany(resource, params, client));\n    },\n  };\n\n  return newProviderApi;\n}\n\nfunction verifyDataProviderArgs(\n  firebaseConfig: {},\n  options?: RAFirebaseOptions\n) {\n  const hasNoApp = !options || !options.app;\n  const hasNoConfig = !firebaseConfig;\n  if (hasNoConfig && hasNoApp) {\n    throw new Error(\n      'Please pass the Firebase firebaseConfig object or options.app to the FirebaseAuthProvider'\n    );\n  }\n  if (options && options.rootRef) {\n    // Will throw error if rootRef doesn't point to a document\n    getAbsolutePath(options.rootRef, 'test');\n  }\n}\n","// From firebase SDK\n\nimport { logError } from \"./logger\";\n\n// - https://github.com/firebase/firebase-js-sdk/blob/9f109f85ad0d99f6c13e68dcb549a0b852e35a2a/packages/functions/src/api/error.ts\nexport function retrieveStatusTxt(status: number): 'ok' | 'unauthenticated' {\n  // Make sure any successful status is OK.\n  if (status >= 200 && status < 300) {\n    return 'ok';\n  }\n  switch (status) {\n    case 401: // 'unauthenticated'\n    case 403: // 'permission-denied'\n      return 'unauthenticated';\n\n    case 0: // 'internal'\n    case 400: // 'invalid-argument'\n    case 404: // 'not-found'\n    case 409: // 'aborted'\n    case 429: // 'resource-exhausted'\n    case 499: // 'cancelled'\n    case 500: // 'internal'\n    case 501: // 'unimplemented'\n    case 503: // 'unavailable'\n    case 504: // 'deadline-exceeded'\n    default:\n      // ignore\n      return 'ok';\n  }\n}\n\n// From firebase SDK\n// tslint:disable-next-line:max-line-length\n// - https://github.com/firebase/firebase-js-sdk/blob/9f109f85ad0d99f6c13e68dcb549a0b852e35a2a/packages/functions/src/api/error.ts\nexport function retrieveStatusCode(statusTxt: string): number {\n  // Make sure any successful status is OK.\n  const regexResult = /\\[code\\=([\\w-]*)/g.exec(statusTxt);\n  const status = Array.isArray(regexResult) && regexResult[1];\n  if (!status) {\n    logError('unknown StatusCode ', {statusTxt});\n  }\n  switch (status) {\n    case 'unauthenticated':\n      return 401;\n    case 'permission-denied':\n      return 403;\n    case 'internal':\n      return 0;\n    case 'invalid-argument':\n      return 400;\n    case 'not-found':\n      return 404;\n    case 'aborted':\n      return 409;\n    case 'resource-exhausted':\n      return 429;\n    case 'cancelled':\n      return 499;\n    case 'internal':\n      return 500;\n    case 'unimplemented':\n      return 501;\n    case 'unavailable':\n      return 503;\n    case 'deadline-exceeded':\n      return 504;\n    default:\n      return 200;\n  }\n}\n","import { FireClient } from '../database/FireClient';\nimport { FirebaseLazyLoadingClient } from '../lazy-loading/FirebaseLazyLoadingClient';\nimport {\n  filterArray,\n  log,\n  recursivelyMapStorageUrls,\n  sortArray,\n} from '../../misc';\nimport * as ra from '../../misc/react-admin-models';\n\nexport async function GetList<T extends ra.Record>(\n  resourceName: string,\n  params: ra.GetListParams,\n  client: FireClient\n): Promise<ra.GetListResult<T>> {\n  log('GetList', { resourceName, params });\n  const { rm, fireWrapper, options } = client;\n\n  if (options?.lazyLoading?.enabled) {\n    const lazyClient = new FirebaseLazyLoadingClient(\n      options,\n      rm,\n      client\n    );\n    return lazyClient.apiGetList<T>(resourceName, params);\n  }\n\n  const filterSafe = params.filter || {};\n\n  const collectionQuery = filterSafe.collectionQuery;\n  delete filterSafe.collectionQuery;\n\n  const r = await rm.TryGetResource(resourceName, 'REFRESH', collectionQuery);\n  const data = r.list;\n  if (params.sort != null) {\n    const { field, order } = params.sort;\n    if (order === 'ASC') {\n      sortArray(data, field, 'asc');\n    } else {\n      sortArray(data, field, 'desc');\n    }\n  }\n  let softDeleted = data;\n  if (options.softDelete && !Object.keys(filterSafe).includes('deleted')) {\n    softDeleted = data.filter((doc) => !doc.deleted);\n  }\n  const filteredData = filterArray(softDeleted, filterSafe);\n  const pageStart = (params.pagination.page - 1) * params.pagination.perPage;\n  const pageEnd = pageStart + params.pagination.perPage;\n  const dataPage = filteredData.slice(pageStart, pageEnd) as T[];\n  const total = filteredData.length;\n\n  if (options.relativeFilePaths) {\n    const data = await Promise.all(\n      dataPage.map((doc) => recursivelyMapStorageUrls(fireWrapper, doc))\n    );\n    return {\n      data,\n      total,\n    };\n  }\n\n  return {\n    data: dataPage,\n    total,\n  };\n}\n","import { FireClient } from '../database/FireClient';\nimport { log, translateDocFromFirestore } from '../../misc';\nimport * as ra from '../../misc/react-admin-models';\n\nexport async function GetOne<T extends ra.Record>(\n  resourceName: string,\n  params: ra.GetOneParams,\n  client: FireClient\n): Promise<ra.GetOneResult<T>> {\n  log(\"GetOne\", { resourceName, params });\n  const { rm } = client;\n  try {\n    const id = params.id + '';\n    const dataSingle = await rm.GetSingleDoc(resourceName, id);\n    client.flogger.logDocument(1)();\n    return { data: dataSingle as T };\n  } catch (error) {\n    throw new Error(\n      'Error getting id: ' + params.id + ' from collection: ' + resourceName\n    );\n  }\n}\n","import { FireClient } from '../database/FireClient';\nimport { log, recursivelyMapStorageUrls } from '../../misc';\nimport * as ra from '../../misc/react-admin-models';\n\nexport async function GetMany<T extends ra.Record>(\n  resourceName: string,\n  params: ra.GetManyParams,\n  client: FireClient\n): Promise<ra.GetManyResult<T>> {\n  const { rm, options, fireWrapper } = client;\n  const r = await rm.TryGetResource(resourceName);\n  const ids = params.ids;\n  log(\"GetMany\", { resourceName, resource: r, params, ids });\n  const matchDocSnaps = await Promise.all(\n    ids.map(idObj => {\n      if (typeof idObj === 'string') {\n        return r.collection.doc(idObj).get()\n      }\n      // Will get and resolve reference documents into the current doc\n      return r.collection.doc((idObj as any)['___refid']).get()\n    })\n  );\n  client.flogger.logDocument(ids.length)();\n  const matches = matchDocSnaps.map((snap) => {\n    return { ...snap.data(), id: snap.id } as T;\n  });\n  const permittedData = options.softDelete\n    ? matches.filter((row) => !row['deleted'])\n    : matches;\n  if (options.relativeFilePaths) {\n    const data = await Promise.all(\n      permittedData.map((doc) => recursivelyMapStorageUrls(fireWrapper, doc))\n    );\n    return {\n      data,\n    };\n  }\n\n  return {\n    data: permittedData,\n  };\n}\n","import { FireClient } from \"../database/FireClient\";\nimport { filterArray, log, recursivelyMapStorageUrls, sortArray } from \"../../misc\";\nimport * as ra from \"../../misc/react-admin-models\";\n\nexport async function GetManyReference<T extends ra.Record>(\n  resourceName: string,\n  params: ra.GetManyReferenceParams,\n  client: FireClient\n): Promise<ra.GetManyReferenceResult<T>> {\n  const { rm, options, fireWrapper } = client;\n  log(\"GetManyReference\", { resourceName, params });\n  const filterSafe = params.filter || {};\n  const collectionQuery = filterSafe.collectionQuery;\n  const r = await rm.TryGetResource(\n    resourceName,\n    \"REFRESH\",\n    collectionQuery\n  );\n  delete filterSafe.collectionQuery;\n  log(\"apiGetManyReference\", { resourceName, resource: r, params });\n  const data = r.list;\n  const targetField = params.target;\n  const targetValue = params.id;\n  let softDeleted = data;\n  if (options.softDelete) {\n    softDeleted = data.filter(doc => !doc['deleted'])\n  }\n  const filteredData = filterArray(softDeleted, filterSafe);\n  const targetIdFilter: Record<string, ra.Identifier> = {};\n  targetIdFilter[targetField] = targetValue;\n  const permittedData = filterArray(filteredData, targetIdFilter);\n  if (params.sort != null) {\n    const { field, order } = params.sort;\n    if (order === \"ASC\") {\n      sortArray(permittedData, field, \"asc\");\n    } else {\n      sortArray(permittedData, field, \"desc\");\n    }\n  }\n  const pageStart = (params.pagination.page - 1) * params.pagination.perPage;\n  const pageEnd = pageStart + params.pagination.perPage;\n  const dataPage = permittedData.slice(pageStart, pageEnd) as T[];\n  const total = permittedData.length;\n\n  if (options.relativeFilePaths) {\n    const data = await Promise.all(\n      permittedData.map((doc) =>\n        recursivelyMapStorageUrls(fireWrapper, doc)\n      )\n    );\n    return { data, total };\n  }\n\n  return { data: dataPage, total };\n}\n","import { FireClient } from \"../database/FireClient\";\nimport { log } from \"../../misc\";\nimport * as ra from \"../../misc/react-admin-models\";\n\nexport async function Update<T extends ra.Record>(\n  resourceName: string,\n  params: ra.UpdateParams,\n  client: FireClient\n): Promise<ra.UpdateResult<T>> {\n  const { rm } = client;\n  log(\"Update\", { resourceName, params });\n  const id = params.id + \"\";\n  delete params.data.id;\n  const r = await rm.TryGetResource(resourceName);\n  log(\"Update\", { resourceName, resource: r, params });\n  const data = await client.parseDataAndUpload(r, id, params.data);\n  const docObj = { ...data };\n  client.checkRemoveIdField(docObj, id);\n  await client.addUpdatedByFields(docObj);\n  const docObjTransformed = client.transformToDb(resourceName, docObj, id);\n  await r.collection.doc(id).update(docObjTransformed);\n  return {\n    data: {\n      ...data,\n      id: id,\n    },\n  };\n}\n","import { FireClient } from \"../database/FireClient\";\nimport { log } from \"../../misc\";\nimport * as ra from \"../../misc/react-admin-models\";\n\nexport async function UpdateMany(\n  resourceName: string,\n  params: ra.UpdateManyParams,\n  client: FireClient\n): Promise<ra.UpdateManyResult> {\n  const { rm } = client;\n  log(\"UpdateMany\", { resourceName, params });\n  delete params.data.id;\n  const r = await rm.TryGetResource(resourceName);\n  log(\"UpdateMany\", { resourceName, resource: r, params });\n  const ids = params.ids;\n  const returnData = await Promise.all(\n    ids.map(async id => {\n      const idStr = id+'';\n      const data = await client.parseDataAndUpload(r, idStr, params.data);\n      const docObj = { ...data };\n      client.checkRemoveIdField(docObj, idStr);\n      await client.addUpdatedByFields(docObj);\n      const docObjTransformed = client.transformToDb(resourceName, docObj, idStr);\n      await r.collection\n        .doc(idStr)\n        .update(docObjTransformed);\n      return {\n        ...data,\n        id: idStr\n      };\n    })\n  );\n  return {\n    data: returnData\n  };\n}\n","import { FireClient } from \"../database/FireClient\";\nimport { log } from \"../../misc\";\nimport * as ra from \"../../misc/react-admin-models\";\n\nexport async function Create<T extends ra.Record>(\n  resourceName: string,\n  params: ra.CreateParams,\n  client: FireClient\n): Promise<ra.CreateResult<T>> {\n  const { rm, fireWrapper } = client;\n  const r = await rm.TryGetResource(resourceName);\n  log(\"Create\", { resourceName, resource: r, params });\n  const hasOverridenDocId = params.data && params.data.id;\n  log(\"Create\", { hasOverridenDocId });\n  if (hasOverridenDocId) {\n    const overridenId = params.data.id;\n    const exists = (await r.collection.doc(overridenId).get()).exists;\n    if (exists) {\n      throw new Error(\n        `the id:\"${overridenId}\" already exists, please use a unique string if overriding the 'id' field`\n      );\n    }\n    const data = await client.parseDataAndUpload(r, overridenId, params.data);\n    if (!overridenId) {\n      throw new Error(\"id must be a valid string\");\n    }\n    const docObj = { ...data };\n    client.checkRemoveIdField(docObj, overridenId);\n    await client.addCreatedByFields(docObj);\n    await client.addUpdatedByFields(docObj);\n    const docObjTransformed = client.transformToDb(resourceName, docObj, overridenId);\n    log(\"Create\", { docObj });\n    await r.collection.doc(overridenId).set(docObjTransformed, { merge: false });\n    return {\n      data: {\n        ...docObjTransformed,\n        id: overridenId,\n      },\n    };\n  }\n  const newId = fireWrapper.dbMakeNewId();\n  const data = await client.parseDataAndUpload(r, newId, params.data);\n  const docObj = { ...data };\n  client.checkRemoveIdField(docObj, newId);\n  await client.addCreatedByFields(docObj);\n  await client.addUpdatedByFields(docObj);\n  const docObjTransformed = client.transformToDb(resourceName, docObj, newId);\n  await r.collection.doc(newId).set(docObjTransformed, { merge: false });\n  return {\n    data: {\n      ...docObjTransformed,\n      id: newId,\n    },\n  };\n}\n","import { FireClient } from \"../database/FireClient\";\nimport { log } from \"../../misc\";\nimport * as ra from \"../../misc/react-admin-models\";\nimport { DeleteSoft } from \"./Delete.Soft\";\n\nexport async function Delete<T extends ra.Record>(\n  resourceName: string,\n  params: ra.DeleteParams,\n  client: FireClient\n): Promise<ra.DeleteResult<T>> {\n  const { rm, options } = client;\n  if (options.softDelete) {\n    return DeleteSoft(resourceName, params, client);\n  }\n  const r = await rm.TryGetResource(resourceName);\n  log(\"apiDelete\", { resourceName, resource: r, params });\n  try {\n    const id = params.id + \"\";\n    await r.collection.doc(id).delete();\n  } catch (error) {\n    throw new Error(error as any);\n  }\n  return {\n    data: params.previousData as T,\n  };\n}\n","import { FireClient } from \"../database/FireClient\";\nimport { log, logError } from \"../../misc\";\nimport * as ra from \"../../misc/react-admin-models\";\n\nexport async function DeleteSoft<T extends ra.Record>(\n  resourceName: string,\n  params: ra.DeleteParams,\n  client: FireClient\n): Promise<ra.DeleteResult<T>> {\n  const { rm } = client;\n  const id = params.id + \"\";\n  const r = await rm.TryGetResource(resourceName);\n  log(\"DeleteSoft\", { resourceName, resource: r, params });\n  const docObj = { deleted: true };\n  await client.addUpdatedByFields(docObj);\n  r.collection\n    .doc(id)\n    .update(docObj)\n    .catch((error) => {\n      logError(\"DeleteSoft error\", { error });\n    });\n  return {\n    data: params.previousData as T,\n  };\n}\n","import { FireClient } from \"../database/FireClient\";\nimport { log } from \"../../misc\";\nimport * as ra from \"../../misc/react-admin-models\";\nimport { DeleteManySoft } from \"./DeleteMany.Soft\";\n\nexport async function DeleteMany(\n  resourceName: string,\n  params: ra.DeleteManyParams,\n  client: FireClient\n): Promise<ra.DeleteManyResult> {\n  const { options, rm, fireWrapper } = client;\n  if (options.softDelete) {\n    return DeleteManySoft(resourceName, params, client);\n  }\n  const r = await rm.TryGetResource(resourceName);\n  log(\"DeleteMany\", { resourceName, resource: r, params });\n  const returnData: ra.Identifier[] = [];\n  const batch = fireWrapper.dbCreateBatch();\n  for (const id of params.ids) {\n    const idStr = id + '';\n    const docToDelete = r.collection.doc(idStr);\n    batch.delete(docToDelete);\n    returnData.push(id);\n  }\n  try {\n    await batch.commit();\n  } catch (error) {\n    throw new Error(error as any)\n  }\n  return { data: returnData };\n}\n","import { FireClient } from \"../database/FireClient\";\nimport { log, logError } from \"../../misc\";\nimport * as ra from \"../../misc/react-admin-models\";\n\nexport async function DeleteManySoft(\n  resourceName: string,\n  params: ra.DeleteManyParams,\n  client: FireClient\n): Promise<ra.DeleteManyResult> {\n  const { rm } = client;\n  const r = await rm.TryGetResource(resourceName);\n  log(\"DeleteManySoft\", { resourceName, resource: r, params });\n  const ids = params.ids;\n  const returnData = await Promise.all(\n    ids.map(async (id) => {\n      const idStr = id + \"\";\n      const docObj = { deleted: true };\n      await client.addUpdatedByFields(docObj);\n      r.collection\n        .doc(idStr)\n        .update(docObj)\n        .catch((error) => {\n          logError(\"apiSoftDeleteMany error\", { error });\n        });\n      return idStr;\n    })\n  );\n  return {\n    data: returnData,\n  };\n}\n","import { messageTypes } from './../misc/messageTypes';\nimport { log, retrieveStatusTxt, logWarn, logger } from '../misc';\nimport { RAFirebaseOptions } from './options';\nimport { FirebaseWrapper } from './database/firebase/FirebaseWrapper';\nimport {\n  AuthProvider as RaAuthProvider,\n  UserIdentity,\n} from '../misc/react-admin-models';\nimport { IFirebaseWrapper } from './database';\nimport { FireUser } from '../misc/firebase-models';\n\nclass AuthClient {\n  private fireWrapper: IFirebaseWrapper;\n\n  constructor(firebaseConfig: {}, optionsInput?: RAFirebaseOptions) {\n    const options = optionsInput || {};\n    log('Auth Client: initializing...', { firebaseConfig, options });\n    this.fireWrapper = new FirebaseWrapper(options, firebaseConfig);\n    options.persistence && this.setPersistence(options.persistence);\n  }\n\n  setPersistence(persistenceInput: 'session' | 'local' | 'none') {\n    return this.fireWrapper.authSetPersistence(persistenceInput);\n  }\n\n  public async HandleAuthLogin(params: { username: string; password: string }) {\n    const { username, password } = params;\n\n    if (username && password) {\n      try {\n        const user = await this.fireWrapper.authSigninEmailPassword(\n          username,\n          password\n        );\n        log('HandleAuthLogin: user sucessfully logged in', { user });\n        return user;\n      } catch (e) {\n        log('HandleAuthLogin: invalid credentials', { params });\n        throw new Error('Login error: invalid credentials');\n      }\n    } else {\n      return this.getUserLogin();\n    }\n  }\n\n  public HandleAuthLogout() {\n    return this.fireWrapper.authSignOut();\n  }\n\n  public HandleAuthError(errorHttp: messageTypes.HttpErrorType) {\n    log('HandleAuthLogin: invalid credentials', { errorHttp });\n    const status = !!errorHttp && errorHttp.status;\n    const statusTxt = retrieveStatusTxt(status);\n    if (statusTxt === 'ok') {\n      log('API is actually authenticated');\n      return Promise.resolve();\n    }\n    logWarn('Received authentication error from API');\n    return Promise.reject();\n  }\n\n  public async HandleAuthCheck(): Promise<any> {\n    return this.getUserLogin();\n  }\n\n  public getUserLogin(): Promise<FireUser> {\n    return this.fireWrapper.authGetUserLoggedIn();\n  }\n\n  public async HandleGetPermissions() {\n    try {\n      const user = await this.getUserLogin();\n      // @ts-ignore\n      const token = await user.getIdTokenResult();\n\n      return token.claims;\n    } catch (e) {\n      log('HandleGetPermission: no user is logged in or tokenResult error', {\n        e,\n      });\n      return null;\n    }\n  }\n\n  public async HandleGetIdentity(): Promise<UserIdentity> {\n    try {\n      const { uid, displayName, photoURL } = await this.getUserLogin();\n      const identity: UserIdentity = {\n        id: uid,\n        fullName: `${displayName ?? ''}`,\n        avatar: `${photoURL ?? ''}`,\n      };\n      return identity;\n    } catch (e) {\n      log('HandleGetIdentity: no user is logged in', {\n        e,\n      });\n      return null as any;\n    }\n  }\n\n  public async HandleGetJWTAuthTime() {\n    try {\n      const user = await this.getUserLogin();\n      // @ts-ignore\n      const token = await user.getIdTokenResult();\n\n      return token.authTime;\n    } catch (e) {\n      log('HandleGetJWTAuthTime: no user is logged in or tokenResult error', {\n        e,\n      });\n      return null;\n    }\n  }\n\n  public async HandleGetJWTExpirationTime() {\n    try {\n      const user = await this.getUserLogin();\n      // @ts-ignore\n      const token = await user.getIdTokenResult();\n\n      return token.expirationTime;\n    } catch (e) {\n      log(\n        'HandleGetJWTExpirationTime: no user is logged in or tokenResult error',\n        {\n          e,\n        }\n      );\n      return null;\n    }\n  }\n\n  public async HandleGetJWTSignInProvider() {\n    try {\n      const user = await this.getUserLogin();\n      // @ts-ignore\n      const token = await user.getIdTokenResult();\n\n      return token.signInProvider;\n    } catch (e) {\n      log(\n        'HandleGetJWTSignInProvider: no user is logged in or tokenResult error',\n        {\n          e,\n        }\n      );\n      return null;\n    }\n  }\n\n  public async HandleGetJWTIssuedAtTime() {\n    try {\n      const user = await this.getUserLogin();\n      // @ts-ignore\n      const token = await user.getIdTokenResult();\n\n      return token.issuedAtTime;\n    } catch (e) {\n      log(\n        'HandleGetJWTIssuedAtTime: no user is logged in or tokenResult error',\n        {\n          e,\n        }\n      );\n      return null;\n    }\n  }\n\n  public async HandleGetJWTToken() {\n    try {\n      const user = await this.getUserLogin();\n      // @ts-ignore\n      const token = await user.getIdTokenResult();\n\n      return token.token;\n    } catch (e) {\n      log(\n        'HandleGetJWTToken: no user is logged in or tokenResult error',\n        {\n          e,\n        }\n      );\n      return null;\n    }\n  }\n}\n\nexport function AuthProvider(\n  firebaseConfig: {},\n  options: RAFirebaseOptions\n): ReactAdminFirebaseAuthProvider {\n  VerifyAuthProviderArgs(firebaseConfig, options);\n  logger.SetEnabled(!!options?.logging);\n  const auth = new AuthClient(firebaseConfig, options);\n\n  const provider: ReactAdminFirebaseAuthProvider = {\n    // React Admin Interface\n    login: (params) => auth.HandleAuthLogin(params),\n    logout: () => auth.HandleAuthLogout(),\n    checkAuth: () => auth.HandleAuthCheck(),\n    checkError: (error) => auth.HandleAuthError(error),\n    getPermissions: () => auth.HandleGetPermissions(),\n    getIdentity: () => auth.HandleGetIdentity(),\n    // Custom Functions\n    getAuthUser: () => auth.getUserLogin(),\n    getJWTAuthTime: () => auth.HandleGetJWTAuthTime(),\n    getJWTExpirationTime: () => auth.HandleGetJWTExpirationTime(),\n    getJWTSignInProvider: () => auth.HandleGetJWTSignInProvider(),\n    getJWTClaims: () => auth.HandleGetPermissions(),\n    getJWTToken: () => auth.HandleGetJWTToken(),\n  };\n  return provider;\n}\n\nexport type ReactAdminFirebaseAuthProvider = RaAuthProvider & {\n  // Custom Functions\n  getAuthUser: () => Promise<FireUser>,\n  getJWTAuthTime: () => Promise<string | null>,\n  getJWTExpirationTime: () => Promise<string | null>,\n  getJWTSignInProvider: () => Promise<string | null>,\n  getJWTClaims: () => Promise<{ [key: string]: any; } | null>,\n  getJWTToken: () => Promise<string | null>,  \n}\n\nfunction VerifyAuthProviderArgs(\n  firebaseConfig: {},\n  options: RAFirebaseOptions\n) {\n  const hasNoApp = !options || !options.app;\n  const hasNoConfig = !firebaseConfig;\n  if (hasNoConfig && hasNoApp) {\n    throw new Error(\n      'Please pass the Firebase firebaseConfig object or options.app to the FirebaseAuthProvider'\n    );\n  }\n}\n"],"names":["data","field","dir","sort","a","b","get","rawB","isAsc","Number","isFinite","rawA","basicSort","toLowerCase","Date","aValue","bValue","filterArray","searchFields","isEmpty","searchObjs","Object","keys","map","fieldName","getSubObjects","value","searchField","searchValue","tree","leaves","obj","path","key","hasOwnProperty","objVal","Array","recursivelyWalk","currentPath","push","getFieldReferences","filter","row","reduce","acc","cur","res","searchThis","toString","includes","isArray","doesRowMatch","LogNoOp","args","constructor","title","cacheEnabledKey","this","isEnabled","localStorage","getItem","SetEnabled","setItem","removeItem","log","console","bind","warn","error","logger","LoggerBase","logError","dispatch","eventName","fileName","eventMonitor","document","getElementById","CustomEvent","detail","dispatchEvent","event","translateDocFromFirestore","result","parsedDoc","refdocs","recusivelyCheckObjectValue","input","fieldPath","toDate","index","isInputADocReference","ref","refDocPath","id","firestore","parent","recursivelyMapStorageUrls","async","fireWrapper","fieldValue","has","src","storage","getDownloadURL","Promise","all","then","parseFireStoreDocument","doc","logWarn","applyRefDocs","refDocs","d","set","dataWithRefs","rootRef","relativePath","Error","rootRefValue","join","withSlashes","split","length","slice","joinPaths","translateDocToFirestore","uploads","recusivelyParseObjectValue","fieldDotsPath","refPath","fieldSlashesPath","rawFile","FirebaseWrapper","inputOptions","firebaseConfig","app","options","optionsSafe","window","_firebase$apps","firebase","apps","initializeApp","ObtainFirebaseApp","dbGetCollection","absolutePath","collection","dbCreateBatch","batch","dbMakeNewId","OnUserLogout","callBack","auth","onAuthStateChanged","user","isLoggedOut","putFile","storagePath","task","put","taskResult","rej","catch","downloadUrl","t","url","fieldSrc","serverTimestamp","FieldValue","persistenceInput","persistenceResolved","Auth","Persistence","LOCAL","NONE","SESSION","setPersistence","email","password","signInWithEmailAndPassword","signOut","resolve","reject","currentUser","unsubscribe","authGetUserLoggedIn","GetApp","db","TASK_PAUSED","TaskState","PAUSED","TASK_RUNNING","RUNNING","TASK_CANCELED","CANCELED","ResourceManager","flogger","resources","resourceName","refresh","collectionQuery","RefreshResource","TryGetResourcePromise","GetResource","resource","initPath","_this$options","_this$options$lazyLoa","lazyLoading","enabled","query","applyQuery","newDocs","list","docs","logDocument","collectionPath","docId","docSnap","exists","getAbsolutePath","hasBeenInited","pathAbsolute","allResources","associateUsersById","getCurrentUserId","getCurrentUserEmail","uid","collRef","FireClient","rm","checkRemoveIdField","dontAddIdFieldToDoc","transformToDb","documentData","r","_this","docPath","u","File","name","fileExtension","fileNameBits","pop","link","uploadAndGetLink","useFileNamesInStorage","disableMeta","currentUserIdentifier","getUserIdentifier","createAtSelector","renameMetaFields","created_at","casing","metaFieldCasing","defautCase","GetSelectorsCreateAt","createBySelector","created_by","GetSelectorsCreateBy","AddCreatedByFields","updateAtSelector","GetSelectorsUpdateAt","updated_at","updateBySelector","updated_by","GetSelectorsUpdateBy","AddUpdatedByFields","useFileName","saveFile","on","snapshot","progress","bytesTransferred","totalBytes","state","relativeFilePaths","storageError","getQueryCursor","params","btoa","JSON","stringify","_extends","defaultParamsToQueryOptions","filters","pagination","filtersStepQuery","entries","where","opStr","filtersToQuery","sortToQuery","order","parsedOrder","toLocaleLowerCase","orderBy","page","perPage","limit","queryCursor","findLastQueryCursor","queryBase","lastQueryCursor","currentPage","currentPageParams","startAt","snapshots","newQuery","docsLength","startAfter","paginationToQuery","sortStepQuery","reactAdminParams","softdeleteEnabled","deleted","FirebaseLazyLoadingClient","client","tryGetResource","getFullParamsForQuery","softDelete","resultsCount","message","total","allCursorsKey","localCursorKeys","parse","concat","newCursors","setQueryCursor","nextPageCursor","getNextPageParams","checkIfOnLastPage","parsedData","_this2","filterWithTarget","target","paramsToQuery","empty","clearQueryCursors","forEach","cursor","DataProvider","optionsInput","_options$firestoreCos","_options$firestoreCos2","verifyDataProviderArgs","ResetCount","shouldReset","KEY_SINGLE","docCount","_options$lazyLoading","count","incrementBy","currentCountRaw","incremented","parseInt","incrementRead","MakeFirestoreLogger","logging","firestoreCostsLogger","persistCount","run","cb","errorMsg","code","retrieveStatusCode","statusTxt","regexResult","exec","status","errorObj","json","newProviderApi","getList","apiGetList","filterSafe","TryGetResource","sortArray","softDeleted","filteredData","pageStart","dataPage","GetList","getOne","dataSingle","GetSingleDoc","GetOne","getMany","GetMany","ids","matchDocSnaps","idObj","matches","snap","permittedData","getManyReference","targetField","targetValue","targetIdFilter","GetManyReference","update","Update","parseDataAndUpload","docObj","addUpdatedByFields","docObjTransformed","updateMany","idStr","UpdateMany","create","hasOverridenDocId","overridenId","addCreatedByFields","_docObjTransformed","merge","newId","Create","delete","Delete","previousData","DeleteSoft","deleteMany","DeleteMany","DeleteManySoft","returnData","docToDelete","commit","persistence","authSetPersistence","username","getUserLogin","authSigninEmailPassword","e","HandleAuthLogout","authSignOut","HandleAuthError","errorHttp","retrieveStatusTxt","getIdTokenResult","claims","displayName","photoURL","fullName","avatar","authTime","expirationTime","signInProvider","issuedAtTime","token","AuthProvider","VerifyAuthProviderArgs","login","HandleAuthLogin","logout","checkAuth","HandleAuthCheck","checkError","getPermissions","HandleGetPermissions","getIdentity","HandleGetIdentity","getAuthUser","getJWTAuthTime","HandleGetJWTAuthTime","getJWTExpirationTime","HandleGetJWTExpirationTime","getJWTSignInProvider","HandleGetJWTSignInProvider","getJWTClaims","getJWTToken","HandleGetJWTToken"],"mappings":"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"}